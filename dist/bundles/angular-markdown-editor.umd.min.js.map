{
  "version": 3,
  "file": "angular-markdown-editor.umd.min.js",
  "sources": [
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/global-editor-options.ts",
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/markdown-editor-config.ts",
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/angular-markdown-editor.component.ts",
    "ng://angular-markdown-editor/out/lib/angular-markdown-editor/angular-markdown-editor.module.ts"
  ],
  "sourcesContent": [
    "import { EditorOption } from './models/editorOption.interface';\n\nexport const GlobalEditorOptions: EditorOption = {\n  autofocus: false,\n  disabledButtons: [],\n  dropZoneOptions: null,\n  enableDropDataUri: false,\n  footer: '',\n  height: 'inherit',\n  hiddenButtons: [],\n  hideable: false,\n  iconlibrary: 'glyph',\n  initialstate: 'editor',\n  language: 'fr',\n  additionalButtons: [\n    [{\n    name: 'groupFont',\n    data: [{\n      name: 'cmdStrikethrough',\n      toggle: false,\n      title: 'Strikethrough',\n      icon: {\n        fa: 'fa fa-strikethrough',\n        glyph: 'glyphicon glyphicon-minus'\n      },\n      callback: (e) => {\n        // Give/remove ~~ surround the selection\n        let chunk;\n        let cursor;\n        const selected = e.getSelection();\n        const content = e.getContent();\n\n        if (selected.length === 0) {\n          // Give extra word\n          chunk = e.__localize('strikethrough');\n        } else {\n          chunk = selected.text;\n        }\n\n        // transform selection and set the cursor into chunked text\n        if (content.substr(selected.start - 2, 2) === '~~' &&\n          content.substr(selected.end, 2) === '~~') {\n          e.setSelection(selected.start - 2, selected.end + 2);\n          e.replaceSelection(chunk);\n          cursor = selected.start - 2;\n        } else {\n          e.replaceSelection('~~' + chunk + '~~');\n          cursor = selected.start + 2;\n        }\n\n        // Set the cursor\n        e.setSelection(cursor, cursor + chunk.length);\n      }\n    }]\n    },\n    {\n      name: 'groupMisc',\n      data: [{\n        name: 'cmdTable',\n        toggle: false,\n        title: 'Table',\n        icon: {\n          fa: 'fa fa-table',\n          glyph: 'glyphicon glyphicon-th'\n        },\n        callback: (e) => {\n          // Replace selection with some drinks\n          let chunk;\n          let cursor;\n          const selected = e.getSelection();\n\n          chunk = '\\n| Tables        | Are           | Cool  | \\n'\n            + '| ------------- |:-------------:| -----:| \\n'\n            + '| col 3 is      | right-aligned | $1600 | \\n'\n            + '| col 2 is      | centered      |   $12 | \\n'\n            + '| zebra stripes | are neat      |    $1 |';\n\n          // transform selection and set the cursor into chunked text\n          e.replaceSelection(chunk);\n          cursor = selected.start;\n\n          // Set the cursor\n          e.setSelection(cursor, cursor + chunk.length);\n        }\n      }]\n    }]\n  ]\n};\n",
    "import { GlobalEditorOptions } from './global-editor-options';\r\n\r\nexport class MarkdownEditorConfig {\r\n  options: any;\r\n\r\n  constructor() {\r\n    this.options = GlobalEditorOptions;\r\n  }\r\n}\r\n",
    "import { AfterViewInit, Component, ElementRef, forwardRef, Inject, Injectable, Input, ViewChild } from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\r\nimport { EditorLocale, EditorOption, Dictionary } from './models';\r\nimport { GlobalEditorOptions } from './global-editor-options';\r\n\r\ndeclare var $: any;\r\n\r\nexport const MARKDOWN_EDITOR_VALUE_ACCESSOR: any = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => AngularMarkdownEditorComponent),\r\n  multi: true\r\n};\r\n\r\n@Injectable()\r\n@Component({\r\n  moduleId: 'angulaMarkdownEditor',\r\n  selector: 'angular-markdown-editor',\r\n  template: '<textarea #markdownEditorElm id=\"{{textareaId}}\" name=\"{{textareaId}}\" data-provide=\"markdown\" rows=\"{{rows}}\"></textarea>',\r\n  providers: [MARKDOWN_EDITOR_VALUE_ACCESSOR]\r\n})\r\nexport class AngularMarkdownEditorComponent implements AfterViewInit {\r\n  @ViewChild('markdownEditorElm') elm: ElementRef;\r\n\r\n  /** Locale set that has a language and dictionary that can be added as an alternative language. Can be 1 or more dictionaries */\r\n  @Input()\r\n  set locale(locale: EditorLocale | EditorLocale[]) {\r\n    this.addLocaleSet(locale);\r\n  }\r\n\r\n  /** Id of the textarea DOM element used by the lib */\r\n  @Input() textareaId: string;\r\n\r\n  /** Markdown Editor Options to pass to the element */\r\n  @Input() options?: EditorOption;\r\n\r\n  /** Number of rows for the textarea */\r\n  @Input() rows = 10;\r\n\r\n  public value: any | any[];\r\n  public onModelChange: Function = () => {};\r\n  public onModelTouched: Function = () => {};\r\n\r\n  constructor(@Inject('config') private forRootConfig: EditorOption) {}\r\n\r\n  ngAfterViewInit() {\r\n    this.initialization();\r\n  }\r\n\r\n  addLocaleSet(editorLocale: EditorLocale | EditorLocale[]) {\r\n    if (!editorLocale) {\r\n      return;\r\n    }\r\n    if (Array.isArray(editorLocale)) {\r\n      editorLocale.forEach((locale: EditorLocale) => $.fn.markdown.messages[locale.language] = locale.dictionary);\r\n    } else {\r\n      $.fn.markdown.messages[editorLocale.language] = editorLocale.dictionary;\r\n    }\r\n  }\r\n\r\n  initialization() {\r\n    // get all default options to get the entire list of onEvent so that we can attach Dispatch Custom Event to them\r\n    // we also merge these with the options, and pass these merged options to the hookToEditorEvents() method to cover all onEvent callbacks\r\n    const markdownDefaultOptions = $.fn.markdown.defaults;\r\n\r\n    // re-hook new events that were optionally defined in the options\r\n    // merge the options, the order matters (last options on the right have higher priorities)\r\n    const options = { ...markdownDefaultOptions, ...GlobalEditorOptions, ...this.forRootConfig, ...this.options };\r\n\r\n    // hook all events to respective callbacks\r\n    // 1- could be coming from a Dispatched Event in the View:: (onX)=\"do()\"\r\n    // 2- or from editor option callback in the Component:: const options = { onX: () => do() }\r\n    this.hookToEditorEvents(options);\r\n\r\n    // hook to the onChange event to update our model\r\n    // however we don't want to override the previous callback, so we will run that one to if exists\r\n    const previousOnChange = options.onChange;\r\n    options.onChange = (e) => {\r\n      this.onModelChange(e && e.getContent && e.getContent());\r\n      if (typeof previousOnChange === 'function') {\r\n        previousOnChange(e);\r\n      }\r\n    };\r\n\r\n    // finally create the editor\r\n    $(`#${this.textareaId}`).markdown(options);\r\n  }\r\n\r\n  /**\r\n   * Hook any of the editor event(s) to Dispatch Custom Event so that we can use them in Angular with (onX)=\"doSomething($event.detail.eventData)\"\r\n   * @param editor options\r\n   */\r\n  hookToEditorEvents(options) {\r\n    for (const prop in options) {\r\n      if (options.hasOwnProperty(prop) && prop.startsWith('on')) {\r\n        const previousEvent = options[prop];\r\n\r\n        // on Callback triggered\r\n        options[prop] = (e) => {\r\n          // Dispatch a Custom Event, so that the (onX)=\"do()\" from the View works\r\n          this.dispatchCustomEvent(prop, { eventData: e });\r\n\r\n          // if an event was passed through the options (instead of dispatch), and is not empty function, then we need to run it as well\r\n          // basically we don't want the Dispatch Custom Event (onX)=\"do()\" to override the ones passed directly in the editor option callbacks\r\n          if (typeof previousEvent === 'function') {\r\n            previousEvent(e);\r\n          }\r\n        };\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Write value to the native element\r\n   * @param value string\r\n   */\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n\r\n    // preset values in the DOM element\r\n    if (this.value) {\r\n      this.elm.nativeElement.value = this.value;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: Function): void {\r\n    this.onModelChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: Function): void {\r\n    this.onModelTouched = fn;\r\n  }\r\n\r\n  /** Dispatch of Custom Event, which by default will bubble & is cancelable */\r\n  private dispatchCustomEvent(eventName: string, data?: any, isBubbling: boolean = true, isCancelable: boolean = true) {\r\n    const eventInit: CustomEventInit = { bubbles: isBubbling, cancelable: isCancelable };\r\n    if (data) {\r\n      eventInit.detail = data;\r\n    }\r\n    return this.elm.nativeElement.dispatchEvent(new CustomEvent(eventName, eventInit));\r\n  }\r\n}\r\n",
    "import { CommonModule } from '@angular/common';\r\nimport { NgModule } from '@angular/core';\r\nimport { AngularMarkdownEditorComponent } from './angular-markdown-editor.component';\r\nimport { EditorOption } from './models';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [AngularMarkdownEditorComponent],\r\n  exports: [AngularMarkdownEditorComponent],\r\n  entryComponents: [AngularMarkdownEditorComponent]\r\n})\r\nexport class AngularMarkdownEditorModule {\r\n  static forRoot(config: EditorOption = {}) {\r\n    return {\r\n      ngModule: AngularMarkdownEditorModule,\r\n      providers: [\r\n        { provide: 'config', useValue: config }\r\n      ]\r\n    };\r\n  }\r\n}\r\n"
  ],
  "names": [
    "GlobalEditorOptions",
    "autofocus",
    "disabledButtons",
    "dropZoneOptions",
    "enableDropDataUri",
    "footer",
    "height",
    "hiddenButtons",
    "hideable",
    "iconlibrary",
    "initialstate",
    "language",
    "additionalButtons",
    "name",
    "data",
    "toggle",
    "title",
    "icon",
    "fa",
    "glyph",
    "callback",
    "e",
    "chunk",
    "cursor",
    "selected",
    "getSelection",
    "content",
    "getContent",
    "length",
    "__localize",
    "text",
    "substr",
    "start",
    "end",
    "setSelection",
    "replaceSelection",
    "MarkdownEditorConfig",
    "this",
    "options",
    "MARKDOWN_EDITOR_VALUE_ACCESSOR",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "AngularMarkdownEditorComponent",
    "multi",
    "forRootConfig",
    "rows",
    "onModelChange",
    "onModelTouched",
    "Object",
    "defineProperty",
    "prototype",
    "set",
    "locale",
    "addLocaleSet",
    "ngAfterViewInit",
    "initialization",
    "editorLocale",
    "Array",
    "isArray",
    "forEach",
    "$",
    "fn",
    "markdown",
    "messages",
    "dictionary",
    "_this",
    "markdownDefaultOptions",
    "defaults",
    "assign",
    "hookToEditorEvents",
    "previousOnChange",
    "onChange",
    "textareaId",
    "_loop_1",
    "prop",
    "hasOwnProperty",
    "startsWith",
    "previousEvent_1",
    "dispatchCustomEvent",
    "eventData",
    "writeValue",
    "value",
    "elm",
    "nativeElement",
    "registerOnChange",
    "registerOnTouched",
    "eventName",
    "isBubbling",
    "isCancelable",
    "eventInit",
    "bubbles",
    "cancelable",
    "detail",
    "dispatchEvent",
    "CustomEvent",
    "type",
    "Injectable",
    "Component",
    "args",
    "moduleId",
    "selector",
    "template",
    "providers",
    "undefined",
    "decorators",
    "Inject",
    "ViewChild",
    "Input",
    "AngularMarkdownEditorModule",
    "forRoot",
    "config",
    "ngModule",
    "useValue",
    "NgModule",
    "imports",
    "CommonModule",
    "declarations",
    "exports",
    "entryComponents"
  ],
  "mappings": "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"
}
